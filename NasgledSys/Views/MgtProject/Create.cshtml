@model NasgledSys.Models.ProjectClass
    @using NasgledSys.Models;
@{
    ViewBag.Title = "Create Project";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}
@section SideBar{
    <center>
        <h4>
            <span class="heading-text">
                <i class="icon-folder-download position-left"></i>  <a href="@Url.Action("Index","MgtProject")">>Projects</a>
            </span>
        </h4>
       
    </center>

}
@section CenterTitle{
   Add Project for @Html.DisplayFor(m=>GlobalClass.CCompany.CompanyName)
}
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
<script src="~/Scripts/jquery.maskedinput.js"></script>
<script src="~/Content/assets/js/plugins/forms/inputs/formatter.min.js"></script>
<script src="~/Content/assets/js/plugins/forms/inputs/touchspin.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        LoadCityDropDown_ToCreate();
        LoadStateDropDown_ToCreate();
        LoadProjectStatus();
        LoadPrimaryContact();
    });
    $(function () {
        $('[mask]').each(function (e) {
            $(this).mask($(this).attr('mask'));
        });
    });
    $(function () {
        $('#PrimaryContactKey')
                .select2()
                .on('select2:open', () => {
                    $(".select2-results:not(:has(a))").append('<a href="#" style="padding: 6px;height: 20px;display: inline-table;">Create new Primary Contact</a>');
                });
    });
    function LoadProjectStatus() {
        var select = $('select[name=ProjectStatusKey]');
        $.ajax({
            traditional: true,
            type: "post",
            dataType: "json",
            contentType: "application/json",
            url: "/DropdownUtility/loadProjectStatus/",
            data: JSON.stringify({ ProjectStatusKey: '@Model.ProjectStatusKey' }),
            success: function (data) {
                var res = "<option>Select</option>";
                for (var i = 0; i < data.length; i++) {
                   res = res + "<option value='" + data[i].ProjectStatusKey + "' " + data[i].Selected + ">" + data[i].TypeName + "</option>";
                }
                select.html(res);
            },
            error: function (xhr, textStatus, errorThrown) {
                console.log("Error on ajax call");
            }
        });
    }

    function LoadPrimaryContact() {
        var select = $('select[name=PrimaryContactKey]');
        $.ajax({
            traditional: true,
            type: "post",
            dataType: "json",
            contentType: "application/json",
            url: "/DropdownUtility/loadPrimaryContact/",
            data: JSON.stringify({ PrimaryContactKey: '@Model.PrimaryContactKey' }),
            success: function (data) {
                var res = "<option>Select</option>";
               // res = res + "<option value='NEW'>Add new Contact</option>";
                for (var i = 0; i < data.length; i++) {
                    res = res + "<option value='" + data[i].Value + "' " + data[i].Selected + ">" + data[i].Text + "</option>";
                }
                select.html(res);
            },
            error: function (xhr, textStatus, errorThrown) {
                console.log("Error on ajax call");
            }
        });
    }
    function LoadCityDropDown_ToCreate() {
        var select = $('select[name=CityKey]');
        $.ajax({
            traditional: true,
            type: "post",
            dataType: "json",
            contentType: "application/json",
            url: "/DropdownUtility/loadCityDropDown_ToCreate/",
            data: JSON.stringify({ CityKey: '@Model.CityKey' }),
            success: function (data) {
                var res = "<option>Select</option>";
                for (var i = 0; i < data.length; i++) {
                    res = res + "<option value='" + data[i].CityKey + "' " + data[i].Selected + ">" + data[i].CityName + "</option>";
                }
                select.html(res);
            },
            error: function (xhr, textStatus, errorThrown) {
                console.log("Error on ajax call");
            }
        });
    }
    function LoadStateDropDown_ToCreate() {
        var select = $('select[name=StateKey]');
        $.ajax({
            traditional: true,
            type: "post",
            dataType: "json",
            contentType: "application/json",
            url: "/DropdownUtility/LoadStateDropDown_ToCreate/",
            data: JSON.stringify({ StateKey: '@Model.StateKey' }),
            success: function (data) {
                var res = "<option>Select</option>";
                for (var i = 0; i < data.length; i++) {
                    res = res + "<option value='" + data[i].PKey + "' " + data[i].Selected + ">" + data[i].StateName + "</option>";
                }
                select.html(res);

            },
            error: function (xhr, textStatus, errorThrown) {
                console.log("Error on ajax call");
            }
        });
    }
</script>

<div class="row">
    <div class="col-md-2">&nbsp;</div>

    @using (Html.BeginForm("Create", "MgtProject", FormMethod.Post, new { @class = "form-horizontal" }))
    {
        <div class="panel panel-default col-md-8">

            <div class="panel-heading">
                <ul class="nav nav-pills">
                    <li class="active"><a href="#tab-demo1" data-toggle="tab">General</a></li>
                    <li><a href="#tab-demo2" data-toggle="tab">Location</a></li>
                    <li><a href="#tab-demo3" data-toggle="tab">Costs</a></li>
                    <li><a href="#tab-demo4" data-toggle="tab">Incentives</a></li>
                    <li><a href="#tab-demo5" data-toggle="tab">Notes</a></li>

                </ul>
            </div>
            <div class="panel-body">

                @Html.ValidationSummary()
                @Html.HiddenFor(model => model.ProjectKey,new { id= "ProjectKey" })




                <!-- /tabbed navigation -->
                <!-- Tabbed navigation content -->
                <div class="tab-content">
                    <div class="tab-pane fade in active" id="tab-demo1">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectName)
                            @Html.TextBoxFor(model => model.ProjectName, new { placeholder = "Project Name",  id = "ProjectName", @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProjectStatusKey)
                            <select name="ProjectStatusKey" placeholder="Select" class="select select-search"></select>
                            @Html.ValidationMessageFor(model => model.ProjectStatusKey, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PrimaryContactKey)
                            <select name="PrimaryContactKey" placeholder="Select" id="PrimaryContactKey" class="select select-search"></select>
                            @Html.ValidationMessageFor(model => model.PrimaryContactKey, "", new { @class = "text-danger" })
                            <span class="small text-muted">Any documents for this client will use this Contact's Information.</span>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.PreparedByDetail)
                            @Html.TextBoxFor(model => model.PreparedByDetail, new {@readonly="readonly", placeholder = "Prepared By User", id = "PreparedByDetail", @class = "form-control" })
                            @Html.HiddenFor(model => model.PreparedBy, new { id = "PreparedBy" })
                            @Html.ValidationMessageFor(model => model.PreparedByDetail, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(model => model.PreparedBy, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ExpectedClosingMonth)
                            @Html.TextBoxFor(model => model.ExpectedClosingMonth, new { placeholder = "Month", id = "ExpectedClosingMonth", @class = "form-control" })
                            @Html.TextBoxFor(model => model.EspectedClosingYear, new { placeholder = "Year", id = "EspectedClosingYear", @class = "form-control" })
                            <span class="small text-muted">The Date you estimate this project will complete</span>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProbabilityOfCompletion)
                            @Html.TextBoxFor(model => model.ProbabilityOfCompletion, new { placeholder = "Probability the project will be completed (%)",type="number", id = "ProbabilityOfCompletion", @class = "form-control" })

                            @Html.ValidationMessageFor(model => model.ProbabilityOfCompletion, "", new { @class = "text-danger" })
                            <span class="small text-muted">Enter whole number without % (i.e. enter 6 for 6% not 0.06)</span>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.IsAccessableByOthers)
                            @Html.CheckBoxFor(model => model.IsAccessableByOthers, new {  id = "IsAccessableByOthers", @class = "form-control" })

                        </div>

                    </div>
                    <div class="tab-pane fade" id="tab-demo2">
                        <div class="panel-body">
                            <div class="form-group">
                                @Html.LabelFor(model => model.OfficePhone)
                                @Html.TextBoxFor(model => model.OfficePhone, new { mask = "(999) 999-9999", placeholder = "Office Phone", id = "OfficePhone", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.OfficePhone, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Address)
                                @Html.TextBoxFor(model => model.Address, new { placeholder = "Office Address", id = "Address", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Address2)
                                @Html.TextBoxFor(model => model.Address2, new { placeholder = "Office Address 2", id = "Address2", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CityKey)
                                <select name="CityKey" placeholder="Select" class="select select-search"></select>
                                @Html.ValidationMessageFor(model => model.CityKey, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.StateKey)
                                <select name="StateKey" placeholder="Select" class="select select-search"></select>
                                @Html.ValidationMessageFor(model => model.StateKey, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Zipcode)
                                @Html.TextBoxFor(model => model.Zipcode, new { placeholder = "Zipcode", id = "Zipcode", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Zipcode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="tab-demo3">
                        <div class="panel-body">
                            <div class="form-group">
                                @Html.LabelFor(model => model.LaborCost)


                                <div class="input-group bootstrap-touchspin">

                                    <span class="input-group-addon bootstrap-touchspin-prefix">$</span>
                                    @Html.TextBoxFor(model => model.LaborCost, new {type="number", placeholder = "LABOR COST NOT INCLUDED IN PRODUCT COST", id = "LaborCost", @value = "0", @class="touchspin-prefix form-control", @style="display: block;" })

                                    <span class="input-group-addon bootstrap-touchspin-postfix" style="display: none;"></span>
                                </div>

                            </div>
                            <div class="form-group">

                                <label>Product Markup Percentage</label>
                                <div class="input-group bootstrap-touchspin">

                                    <span class="input-group-addon bootstrap-touchspin-prefix" style="display: none;"></span>
                                    @Html.TextBoxFor(model => model.MarkupPercentage, new { type = "number", id = "MarkupPercentage", @value = "0", @class = "touchspin-prefix form-control", @style = "display: block;" })
                                    <span class="input-group-addon bootstrap-touchspin-postfix">%</span>
                                </div>
                                <p class="small text-muted">
                                    Enter percentage without  % (and enter 6 for 6% not 0.06). Product price to your customer equals product cost*( 1 + markup),so a $20 product cost and a 50% Markup
                                    will have a price of $30.
                                </p>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Address2)
                                @Html.TextBoxFor(model => model.Address2, new { placeholder = "Office Address 2", id = "Address2", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.CityKey)
                                <select name="CityKey" placeholder="Select" class="select select-search"></select>
                                @Html.ValidationMessageFor(model => model.CityKey, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.StateKey)
                                <select name="StateKey" placeholder="Select" class="select select-search"></select>
                                @Html.ValidationMessageFor(model => model.StateKey, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Zipcode)
                                @Html.TextBoxFor(model => model.Zipcode, new { placeholder = "Zipcode", id = "Zipcode", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Zipcode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="tab-demo4">Tab 4 content</div>
                    <div class="tab-pane fade" id="tab-demo5">Tab 5 content</div>
                </div>

            </div>


            <div class="panel-footer">
                <center>
                    <a href="@Url.Action("Index","MgtProject")" class="btn btn-primary btn-xlg col-lg-4">Cancel </a> &nbsp;
                    <button type="submit" class="btn btn-primary btn-xlg col-lg-4" id="btnAdd">Create</button>
                </center>
                <h2>@ViewBag.mess</h2>
            </div>

        </div>
    }

    <div class="col-md-2">&nbsp;</div>
</div>
